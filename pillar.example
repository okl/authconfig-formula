nginx:
  # These are usually set by grains in map.jinja
  lookup:
    packages: 
    service: nginx
    vhost_available: /etc/nginx/sites-available
    vhost_enabled: /etc/nginx/sites-enabled
    vhost_use_symlink: True
    # This is required for RedHat like distros (Amazon Linux) that don't follow semantic versioning for $releasever
    rh_os_releasever: '6'

  package:
    opts: {} # this partially exposes parameters of pkg.installed

  service:
    enable: True # Whether or not the service will be enabled/running or dead
    opts: {} # this partially exposes parameters of service.running / service.dead

  server:
    opts: {} # this partially exposes file.managed parameters as they relate to the main nginx.conf file

  vhosts:
    disabled_postfix: .disabled # a postfix appended to files when doing non-symlink disabling
    symlink_opts: {} # partially exposes file.symlink params when symlinking enabled sites
    rename_opts: {} # partially exposes file.rename params when not symlinking disabled/enabled sites
    managed_opts: {} # partially exposes file.managed params for managed vhost files
    dir_opts: {} # partially exposes file.directory params for site available/enabled dirs

    # vhost declarations
    # vhosts will default to being placed in vhost_available
    managed:
      mysite: # relative pathname of the vhost file
        # may be True, False, or None where True is enabled, False, disabled, and None indicates no action
        available_dir: /tmp/sites-available # an alternate directory (not sites-available) where this vhost may be found
        enabled_dir: /tmp/sites-enabled # an alternate directory (not sites-available) where this vhost may be found
        disabled_name: mysite.aint_on # an alternative disabled name to be use when not symlinking
        enabled: True
        
        # May be a list of config options or None, if None, no vhost file will be managed/templated
        # Take server directives as lists of dictionaries. If the dictionary value is another list of
        # dictionaries a block {} will be started with the dictionary key name
        config:
          - server:
            - server_name: localhost
            - listen: 
              - 80
              - default_server
            - index:
              - index.html
              - index.htm
            - location ~ .htm:
              - try_files:
                - $uri
                - $uri/ =404
              - test: something else
              
        # The above outputs:
        # server {
        #    server_name localhost;
        #    listen 80 default_server;
        #    index index.html index.htm;
        #    location ~ .htm {
        #        try_files $uri $uri/ =404;
        #        test something else;
        #    }
        # }         

  # If you're doing SSL termination, you can deploy certificates this way.
  # The private one(s) should go in a separate pillar file not in version
  # control (or use encrypted pillar data).
  certificates:
    'www.example.com':
      public_cert: |
        -----BEGIN CERTIFICATE-----
        (Your Primary SSL certificate: www.example.com.crt)
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        (Your Intermediate certificate: ExampleCA.crt)
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        (Your Root certificate: TrustedRoot.crt)
        -----END CERTIFICATE-----
      private_key: |
        -----BEGIN RSA PRIVATE KEY-----
        (Your Private Key: www.example.com.key)
        -----END RSA PRIVATE KEY-----
